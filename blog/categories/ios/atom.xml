<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | My Octopress Blog]]></title>
  <link href="http://caileishowshow.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://caileishowshow.github.io/"/>
  <updated>2015-08-21T22:56:45+08:00</updated>
  <id>http://caileishowshow.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[title]]></title>
    <link href="http://caileishowshow.github.io/blog/2015/08/21/title/"/>
    <updated>2015-08-21T22:52:14+08:00</updated>
    <id>http://caileishowshow.github.io/blog/2015/08/21/title</id>
    <content type="html"><![CDATA[<h2>WebViewJavascriptBridge笔记</h2>

<p>WebViewJavascriptBridge是一个用来进行javascript和ios代码交互的第三方库</p>

<h3>Objective-C端</h3>

<p>//初始化
<em>bridge = [WebViewJavascriptBridge bridgeForWebView:</em>webView webViewDelegate:self handler:^(id data, WVJBResponseCallback responseCallback) {
//设置响应返回的结果
}];
创建了一个WebViewJavascriptBridge对象，调用对象的初始化方法，传入一个响应的webView，由于该第三方库复写了UIWebView的代理，因此如果要设置代理中的方法则设置代理，第三个回调函数为javascript调用方法的响应。</p>

<h3>javascript端初始化</h3>

<p>function connectWebViewJavascriptBridge(callback) {
if (window.WebViewJavascriptBridge) {
callback(WebViewJavascriptBridge);
} else {
document.addEventListener(&lsquo;WebViewJavascriptBridgeReady&rsquo;, function() {callback(WebViewJavascriptBridge);}, false);
}
}
connectWebViewJavascriptBridge(function(bridge) {
bridge.init(function(message, responseCallback) {
})
});
javascript的初始化代码用这种固定格式即可，首先创建一个connectWebViewJavascriptBridge的方法，在web页面中注册一个WebViewJavascriptBridgeReady，进行接收，当接收到消息时，返回回调方法。</p>

<h3>javascript 向Objective-C 发送消息</h3>

<p>在connectWebViewJavascriptBridge 中加入以下方法</p>

<p>bridge.send(&ldquo;test&rdquo;);
则在最上端注册的_bridge的回调函数就能接收到</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GVUserDefaults学习笔记]]></title>
    <link href="http://caileishowshow.github.io/blog/2015/07/30/gvuserdefaults/"/>
    <updated>2015-07-30T23:21:27+08:00</updated>
    <id>http://caileishowshow.github.io/blog/2015/07/30/gvuserdefaults</id>
    <content type="html"><![CDATA[<p>一般来说，对于简单的键值对存储，使用NSUserDefault方法来储存是一个很不错的方法，通过NSUserDefault的setvalue forKey方法可以设置存储变量。
GVUserDefault是一个NSUserDefault的扩展，通过扩展一个实体类的方式来进行键值对的存储，类似于下面的代码
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// .h
</span><span class='line'>@interface GVUserDefaults (Properties)
</span><span class='line'>@property (nonatomic, weak) NSString &lt;em&gt;userName;
</span><span class='line'>@property (nonatomic, weak) NSNumber &lt;/em&gt;userId;
</span><span class='line'>@property (nonatomic) NSInteger integerValue;
</span><span class='line'>@property (nonatomic) BOOL boolValue;
</span><span class='line'>@property (nonatomic) float floatValue;
</span><span class='line'>@end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// .m
</span><span class='line'>@implementation GVUserDefaults (Properties)
</span><span class='line'>@dynamic userName;
</span><span class='line'>@dynamic userId;
</span><span class='line'>@dynamic integerValue;
</span><span class='line'>@dynamic boolValue;
</span><span class='line'>@dynamic floatValue;
</span><span class='line'>@end
</span><span class='line'>&lt;code&gt;
</span><span class='line'>之后直接使用**[GVUserDefaults standardUserDefaults].userName**来代替一般使用的**[[NSUserDefaults standardUserDefaults] objectForKey:@"userName"]**方法，类似如下
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>[GVUserDefaults standardUserDefaults].userName = @&ldquo;myusername&rdquo;;</span></code></pre></td></tr></table></div></figure>
相对于原来的方法，还是提供了些许的简便，杜绝了因为输入错key导致的一些低级错误。</p>

<h3>源码分析</h3>

<p>GVUserDefault 的文件很简单，只有一个.h一个.m文件，其中使用了很多runtime 的相关概念。
而在GVUserDefault 也很简单，只有一个单例方法
<code>
+ (instancetype)standardUserDefaults;
</code>
打开.m文件，找到单例的实现方法,也是十分基本的单例实现方法，通过GCD的方式创建单例
<code>
+ (instancetype)standardUserDefaults {
    static dispatch_once_t pred;
    static GVUserDefaults *sharedInstance = nil;
    dispatch_once(&amp;pred, ^{ sharedInstance = [[self alloc] init]; });
    return sharedInstance;
}
</code>
再看init方法，首先看一下有没有实现setupDefault方法，该方法使用来设置默认值的，如果实现了这个方法，就设置NSuserdefault的默认值
<code>
        SEL setupDefaultSEL = NSSelectorFromString([NSString stringWithFormat:@"%@pDefaults", @"setu"]);
        if ([self respondsToSelector:setupDefaultSEL]) {
            //设置默认值
        }
        [self generateAccessorMethods];
</code>
最后执行的<strong>- (void)generateAccessorMethods</strong> 是创建构造的重要部分。
首先通过class_copyPropertyList方法得到该类的property 数组，命名为<em>properties，数组中存放objc_property_t 格式的数据，改结构体在runtime.h 中有说明
<code>
    unsigned int count = 0;
    objc_property_t *properties = class_copyPropertyList([self class], &amp;count);
</code>
接下来就是遍历整个数组，取出每一个objc_property_t 结构体。每个结构体中包括两个参数，name和attributes
<code>
    objc_property_t property = properties[i];
    const char *name = property_getName(property);
    const char *attributes = property_getAttributes(property);
</code>
name就是这个属性的名称，比如userName、userId等等
attribute也是一个字符串，类似于<strong>T@&ldquo;NSString&rdquo;,W,D,N</strong>这样，可以认为是一个属性的标志，包括属性类型，以及特定的读写方式等，以后会详细谈到。
在接下来的代码就是根据这个attribute字符串做出一些判断，如果我们的属性指定了getter方法，就是说属性@property 中加入了<strong>getter=Method</strong> 属性，那么在attribute 字符串会有,G+属性名称的字符串，如果判断有此字符串，则用此字符串来构建getter方法，如果没有的话，就用变量名称来构建为getter方法，最后生成方法的SEL
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    const char &lt;/em&gt;name = property_getName(property);//得到@property 名称
</span><span class='line'>    const char *attributes = property_getAttributes(property);//@property 属性&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    char *getter = strstr(attributes, ",G");//判断属性中是否有 getter方法
</span><span class='line'>if (getter) {
</span><span class='line'>    getter = strdup(getter + 2);//如果有，就用该方法名生成方法
</span><span class='line'>    getter = strsep(&amp;getter, ",");
</span><span class='line'>} else {
</span><span class='line'>    getter = strdup(name);//如果没有，则用属性名生成方法
</span><span class='line'>}
</span><span class='line'>SEL getterSel = sel_registerName(getter);//生成方法的SEL描述
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;接下来是生成setter方法，大体的逻辑和生成getter的基本相同，判断的是",S"字符串，生成的方法名则是setXxx (首字母)，其余基本差不多
</span><span class='line'>接下来将生成的属性名和属性get，set方法SEL描述存放到集合之中。
</span><span class='line'>接下来要做的就是将方法绑定到该class上了
</span><span class='line'>首先生成两个方法指针 getterImp 和 setterImp，接下来通过@property的属性的第二个字符来判断该属性的类型，之后通过不同的类型，选择不同的方法。
</span><span class='line'>在类的上半部分定义了很多的方法，类此这样
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;static bool boolGetter(GVUserDefaults &lt;em&gt;self, SEL _cmd) {
</span><span class='line'>NSString &lt;/em&gt;key = [self defaultsKeyForSelector:_cmd];
</span><span class='line'>return [self.userDefaults boolForKey:key];
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;static void boolSetter(GVUserDefaults &lt;em&gt;self, SEL _cmd, bool value) {
</span><span class='line'>NSString &lt;/em&gt;key = [self defaultsKeyForSelector:_cmd];
</span><span class='line'>[self.userDefaults setBool:value forKey:key];
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;static int integerGetter(GVUserDefaults &lt;em&gt;self, SEL _cmd) {
</span><span class='line'>NSString &lt;/em&gt;key = [self defaultsKeyForSelector:_cmd];
</span><span class='line'>return (int)[self.userDefaults integerForKey:key];
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;static void integerSetter(GVUserDefaults &lt;em&gt;self, SEL _cmd, int value) {
</span><span class='line'>NSString &lt;/em&gt;key = [self defaultsKeyForSelector:_cmd];
</span><span class='line'>[self.userDefaults setInteger:value forKey:key];
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;就是根据不同类型选择声称该方法，也是runtime 的一个基本用法，最后再调用**class_addMethod** 方法，来将getter方法和setter 方法写入到类中。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;snprintf(types, 4, "%c@:", type);
</span><span class='line'>class_addMethod([self class], getterSel, getterImp, types);//getter方法写入类
</span><span class='line'>snprintf(types, 5, "v@:%c", type);
</span><span class='line'>class_addMethod([self class], setterSel, setterImp, types);//setter方法写入类
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;总结&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;总的来说，这个类就是将自定义生成的@property属性创建生成getter 和setter 方法，并在方法中加入NSUserDefault的setValue和getValue 方法，从而达到本地保存的效果&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[ios runtime 学习笔记（一）]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://caileishowshow.github.io/blog/2015/07/29/title/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-29T23:24:41+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://caileishowshow.github.io/blog/2015/07/29/title&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;runtime 一直是iOS 开发中的一个难点，其实，在对于一般开发过程中，肯能用到runtime 的机会并不是特别多，但是对于整个系统的了解，以及对于包括程序整体的学习，了解相关的逻辑也是很有必要的，特别是在面试的过程中经常会被问道一些细节，而现在网上一些人也写过类似的教程，但是其中有很多的出入，因此趁这个机会在总结一下。
</span><span class='line'>说到runtime 首先都是说ObjC是一个动态语言，在程序运行时会将他的代码转成C的代码。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;runtime 的用途&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;用来实现一些用ObjC无法实现的功能，包括动态生成类，动态插入方法，动态修改方法等，总之体现了一个动态的效果。
</span><span class='line'>runtime 是苹果提供的一套类库，目前是被苹果开源的，&lt;a href="http://www.opensource.apple.com/source/objc4/objc4-646/"&gt;此处可以下载&lt;/a&gt;到完整的工程文件，一般我们在项目中导入的
</span><span class='line'>#import &lt;objc/runtime.h&gt;
</span><span class='line'>都是他编译好的库，我们只能看见几个头文件，包括runtime.h等等，因此如果想要研究其原理，还是需要下载一份代码。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;源码结构&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;打开源码文件夹，里面有一个runtime的文件夹，里面就是实现runtime功能的所有代码。包括头文件和实现文件，其中很多的实现文件都是以.mm结尾的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;哪个是执行文件&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在runtime.h中，可以找下面这段代码</span></code></pre></td></tr></table></div></figure>
/// An opaque type that represents an Objective-C class.
typedef struct objc_class *Class;</p>

<p>/// Represents an instance of a class.
struct objc_object {
    Class isa  OBJC_ISA_AVAILABILITY;
};</p>

<p>/// A pointer to an instance of a class.
typedef struct objc_object *id;
<code>
所以Class其实是一个objc_class的结构体，而点击objc_class，如果在工程中，会打开runtime.h 文件的objc_class 定义
</code>
struct objc_class {
    Class isa  OBJC_ISA_AVAILABILITY;</p>

<h1>if !<strong>OBJC2</strong></h1>

<pre><code>Class super_class                                        OBJC2_UNAVAILABLE;
const char *name                                         OBJC2_UNAVAILABLE;
long version                                             OBJC2_UNAVAILABLE;
long info                                                OBJC2_UNAVAILABLE;
long instance_size                                       OBJC2_UNAVAILABLE;
struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;
struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;
struct objc_cache *cache                                 OBJC2_UNAVAILABLE;
struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;
</code></pre>

<h1>endif</h1>

<p>} OBJC2_UNAVAILABLE;
<code>
恩，也是一个结构体，不过看到很多的OBJC2_UNAVAILABLE，表示在Objective-C 2.0中不支持，是的，这个结构体是不是在Objective-C 2.0中可用的。那到底是怎么回事呢。
如果在源代码中，会打开一个objc-runtime-new.h文件，其实，这个才是真正runtime生成和执行的文件代码，另外，在目录里面还有个objc-runtime-old.h文件，一个new一个old文件具体有什么区别呢。
在objc-private.h中有这样一段代码
</code></p>

<h1>if <strong>OBJC2</strong></h1>

<h1>include &ldquo;objc-runtime-new.h&rdquo;</h1>

<h1>else</h1>

<h1>include &ldquo;objc-runtime-old.h&rdquo;</h1>

<h1>endif</h1>

<p>```
这就明白了，在Objective-C 2.0中，引入的时objc-runtime-new.h 这个文件，而以前版本中引入的时objc-runtime-old.h 这个版本的文件
记得在刚开始学习iOS开发时，就听说过这样一句话“Objective-C 2.0 是一次大的重构”，如今看看这两个文件，应该就更好理解这句话了。
打开objc-runtime-new.mm 文件，洋洋洒洒近7000行代码，这些代码构成了runtime.h中的大部分功能，接下来进一步研究一下这个庞大的文件函数堆</p>
]]></content>
  </entry>
  
</feed>
